defmodule Explorer.Factory do
  use ExMachina.Ecto, repo: Explorer.Repo

  require Ecto.Query

  import Ecto.Query
  import Kernel, except: [+: 2]

  alias Comeonin.Bcrypt
  alias Explorer.Accounts.{User, UserContact}
  alias Explorer.Admin.Administrator
  alias Explorer.Chain.Block.{EmissionReward, Range, Reward}

  alias Explorer.Chain.{
    Address,
    Address.CurrentTokenBalance,
    Address.TokenBalance,
    Address.CoinBalance,
    Address.CoinBalanceDaily,
    Block,
    ContractMethod,
    Data,
    DecompiledSmartContract,
    Hash,
    InternalTransaction,
    Log,
    PendingBlockOperation,
    SmartContract,
    Token,
    TokenTransfer,
    Token.Instance,
    Transaction,
    StakingPool,
    StakingPoolsDelegator
  }

  alias Explorer.SmartContract.Helper

  alias Explorer.Market.MarketHistory
  alias Explorer.Repo

  def address_factory do
    %Address{
      hash: address_hash()
    }
  end

  def address_name_factory do
    %Address.Name{
      address: build(:address),
      name: "FooContract"
    }
  end

  def unfetched_balance_factory do
    %CoinBalance{
      address_hash: address_hash(),
      block_number: block_number()
    }
  end

  def unfetched_balance_daily_factory do
    %CoinBalanceDaily{
      address_hash: address_hash(),
      day: Timex.shift(Timex.now(), days: Enum.random(0..100) * -1)
    }
  end

  def update_balance_value(%CoinBalance{address_hash: address_hash, block_number: block_number}, value) do
    Repo.update_all(
      from(
        balance in CoinBalance,
        where: balance.address_hash == ^address_hash and balance.block_number == ^block_number
      ),
      set: [value: value, value_fetched_at: DateTime.utc_now()]
    )
  end

  def fetched_balance_factory do
    unfetched_balance_factory()
    |> struct!(value: Enum.random(1..100_000))
  end

  def fetched_balance_daily_factory do
    unfetched_balance_daily_factory()
    |> struct!(value: Enum.random(1..100_000))
  end

  def contract_address_factory do
    %Address{
      hash: address_hash(),
      contract_code: Map.fetch!(contract_code_info(), :bytecode)
    }
  end

  def contract_code_info do
    %{
      bytecode:
        "0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820f65a3adc1cfb055013d1dc37d0fe98676e2a5963677fa7541a10386d163446680029",
      tx_input:
        "0x608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820853a985d0a4b20246785fc2f0357c202faa3db289980a48737180f358f9ddc3c0029",
      name: "SimpleStorage",
      source_code: """
      pragma solidity ^0.4.24;

      contract SimpleStorage {
          uint storedData;

          function set(uint x) public {
              storedData = x;
          }

          function get() public constant returns (uint) {
              return storedData;
          }
      }
      """,
      abi: [
        %{
          "constant" => false,
          "inputs" => [%{"name" => "x", "type" => "uint256"}],
          "name" => "set",
          "outputs" => [],
          "payable" => false,
          "stateMutability" => "nonpayable",
          "type" => "function"
        },
        %{
          "constant" => true,
          "inputs" => [],
          "name" => "get",
          "outputs" => [%{"name" => "", "type" => "uint256"}],
          "payable" => false,
          "stateMutability" => "view",
          "type" => "function"
        }
      ],
      version: "v0.4.24+commit.e67f0147",
      optimized: false
    }
  end

  def contract_code_info_modern_compilator do
    %{
      bytecode:
        "0x608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806360fe47b11461003b5780636d4ce63c14610057575b600080fd5b610055600480360381019061005091906100c3565b610075565b005b61005f61007f565b60405161006c91906100ff565b60405180910390f35b8060008190555050565b60008054905090565b600080fd5b6000819050919050565b6100a08161008d565b81146100ab57600080fd5b50565b6000813590506100bd81610097565b92915050565b6000602082840312156100d9576100d8610088565b5b60006100e7848285016100ae565b91505092915050565b6100f98161008d565b82525050565b600060208201905061011460008301846100f0565b9291505056fea2646970667358221220d5d429d16f620053da9907372b66303e007b04bfd112159cff82cb67ff40da4264736f6c634300080a0033",
      tx_input:
        "0x608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806360fe47b11461003b5780636d4ce63c14610057575b600080fd5b610055600480360381019061005091906100c3565b610075565b005b61005f61007f565b60405161006c91906100ff565b60405180910390f35b8060008190555050565b60008054905090565b600080fd5b6000819050919050565b6100a08161008d565b81146100ab57600080fd5b50565b6000813590506100bd81610097565b92915050565b6000602082840312156100d9576100d8610088565b5b60006100e7848285016100ae565b91505092915050565b6100f98161008d565b82525050565b600060208201905061011460008301846100f0565b9291505056fea2646970667358221220d5d429d16f620053da9907372b66303e007b04bfd112159cff82cb67ff40da4264736f6c634300080a0033",
      name: "SimpleStorage",
      source_code: """
      pragma solidity ^0.8.10;
      // SPDX-License-Identifier: MIT

      contract SimpleStorage {
          uint storedData;

          function set(uint x) public {
              storedData = x;
          }

          function get() public view returns (uint) {
              return storedData;
          }
      }
      """,
      abi: [
        %{
          "inputs" => [],
          "name" => "get",
          "outputs" => [
            %{
              "internalType" => "uint256",
              "name" => "",
              "type" => "uint256"
            }
          ],
          "stateMutability" => "view",
          "type" => "function"
        },
        %{
          "inputs" => [
            %{
              "internalType" => "uint256",
              "name" => "x",
              "type" => "uint256"
            }
          ],
          "name" => "set",
          "outputs" => [],
          "stateMutability" => "nonpayable",
          "type" => "function"
        }
      ],
      version: "v0.8.10+commit.fc410830",
      optimized: false
    }
  end

  def contract_code_info_standard_json_input do
    %{
      bytecode:
        "0x60a06040526007805460ff191690553480156200001b57600080fd5b50604051620026fb380380620026fb8339810160408190526200003e9162000267565b82518390839062000057906003906020850190620000f4565b5080516200006d906004906020840190620000f4565b5050506200008a620000846200009e60201b60201c565b620000a2565b600160065560805250504260085562000317565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010290620002da565b90600052602060002090601f01602090048101928262000126576000855562000171565b82601f106200014157805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017157825182559160200191906001019062000154565b506200017f92915062000183565b5090565b5b808211156200017f576000815560010162000184565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001c257600080fd5b81516001600160401b0380821115620001df57620001df6200019a565b604051601f8301601f19908116603f011681019082821181831017156200020a576200020a6200019a565b816040528381526020925086838588010111156200022757600080fd5b600091505b838210156200024b57858201830151818301840152908201906200022c565b838211156200025d5760008385830101525b9695505050505050565b6000806000606084860312156200027d57600080fd5b83516001600160401b03808211156200029557600080fd5b620002a387838801620001b0565b94506020860151915080821115620002ba57600080fd5b50620002c986828701620001b0565b925050604084015190509250925092565b600181811c90821680620002ef57607f821691505b602082108114156200031157634e487b7160e01b600052602260045260246000fd5b50919050565b6080516123c16200033a60003960008181610432015261148e01526123c16000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638da5cb5b1161010f578063d389800f116100a2578063e2d1e75c11610071578063e2d1e75c1461042d578063e668524414610454578063f06c56101461045c578063f2fde38b1461046557600080fd5b8063d389800f146103d1578063dd62ed3e146103d9578063de5f626814610412578063def68a9c1461041a57600080fd5b8063a9059cbb116100de578063a9059cbb14610390578063b69ef8a8146103a3578063b6b55f25146103ab578063c4d66de8146103be57600080fd5b80638da5cb5b1461035157806395d89b4114610362578063a457c2d71461036a578063a8c62e761461037d57600080fd5b80633950935111610187578063715018a611610156578063715018a61461030357806376dfabb81461030b57806377c7b8fc14610341578063853828b61461034957600080fd5b806339509351146102ac57806348a0d754146102bf5780635b12ff9b146102c757806370a08231146102da57600080fd5b80631f1fcd51116101c35780631f1fcd511461025557806323b872dd146102755780632e1a7d4d14610288578063313ce5671461029d57600080fd5b806306fdde03146101f5578063095ea7b314610213578063158ef93e1461023657806318160ddd14610243575b600080fd5b6101fd610478565b60405161020a9190612132565b60405180910390f35b61022661022136600461217a565b61050a565b604051901515815260200161020a565b6007546102269060ff1681565b6002545b60405190815260200161020a565b61025d610522565b6040516001600160a01b03909116815260200161020a565b6102266102833660046121a6565b6105bd565b61029b6102963660046121e7565b6105e3565b005b6040516012815260200161020a565b6102266102ba36600461217a565b6108db565b61024761091a565b61029b6102d5366004612200565b61099d565b6102476102e8366004612200565b6001600160a01b031660009081526020819052604090205490565b61029b610b62565b600954600a54610322916001600160a01b03169082565b604080516001600160a01b03909316835260208301919091520161020a565b610247610bc8565b61029b610c0c565b6005546001600160a01b031661025d565b6101fd610c25565b61022661037836600461217a565b610c34565b600b5461025d906001600160a01b031681565b61022661039e36600461217a565b610ce9565b610247610cf7565b61029b6103b93660046121e7565b610e18565b6102266103cc366004612200565b610ff1565b61029b611165565b6102476103e736600461221d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61029b6111f6565b61029b610428366004612200565b61127a565b6102477f000000000000000000000000000000000000000000000000000000000000000081565b61029b6113d1565b61024760085481565b61029b610473366004612200565b6115eb565b60606003805461048790612256565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390612256565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b5050505050905090565b6000336105188185856116cd565b5060019392505050565b600b54604080517f1f1fcd5100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691631f1fcd51916004808301926020929190829003018186803b15801561058057600080fd5b505afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190612291565b905090565b6000336105cb858285611826565b6105d68585856118b8565b60019150505b9392505050565b6002600654141561063b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026006558061068d5760405162461bcd60e51b815260206004820152601560248201527f706c656173652070726f7669646520616d6f756e7400000000000000000000006044820152606401610632565b600061069860025490565b826106a1610cf7565b6106ab91906122c4565b6106b591906122e3565b60405181815290915033907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a26106f73383611acf565b6000610701610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190612305565b9050818110156108b4576000610790828461231e565b600b546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b505050506000610812610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561085357600080fd5b505afa158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088b9190612305565b90506000610899848361231e565b9050828110156108b0576108ad8185612335565b94505b5050505b6108d133836108c1610522565b6001600160a01b03169190611c51565b5050600160065550565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906105189082908690610915908790612335565b6116cd565b6000610924610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561096557600080fd5b505afa158015610979573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190612305565b6005546001600160a01b031633146109f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b806001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3057600080fd5b505afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190612291565b6001600160a01b0316306001600160a01b031614610aee5760405162461bcd60e51b815260206004820152602160248201527f50726f706f73616c206e6f742076616c696420666f722074686973205661756c60448201527f74000000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6040805180820182526001600160a01b0383168082524260209283018190526009805473ffffffffffffffffffffffffffffffffffffffff191683179055600a5591519182527f1aae2ec5647db56da2d513de40528ba3565c6057525637050660c4323bbac7df910160405180910390a150565b6005546001600160a01b03163314610bbc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b610bc66000611cfa565b565b6000610bd360025490565b15610bff57600254610be3610cf7565b610bf590670de0b6b3a76400006122c4565b6105b891906122e3565b50670de0b6b3a764000090565b33600090815260208190526040902054610bc6906105e3565b60606004805461048790612256565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610cd15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610632565b610cde82868684036116cd565b506001949350505050565b6000336105188185856118b8565b600b54604080517f722713f700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163722713f7916004808301926020929190829003018186803b158015610d5557600080fd5b505afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d9190612305565b610d95610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190612305565b6105b89190612335565b60026006541415610e6b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610632565b600260065580610ebd5760405162461bcd60e51b815260206004820152601560248201527f706c656173652070726f7669646520616d6f756e7400000000000000000000006044820152606401610632565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2600b60009054906101000a90046001600160a01b03166001600160a01b031663573fef0a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050506000610f64610cf7565b9050610f85333084610f74610522565b6001600160a01b0316929190611d59565b610f8d611165565b6000610f97610cf7565b9050610fa3828261231e565b92506000610fb060025490565b610fbb575082610fdc565b82610fc560025490565b610fcf90866122c4565b610fd991906122e3565b90505b610fe63382611daa565b505060016006555050565b6005546000906001600160a01b0316331461104e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b60075460ff16156110a15760405162461bcd60e51b815260206004820181905260248201527f436f6e747261637420697320616c726561647920696e697469616c697a65642e6044820152606401610632565b6008546110b0906104b0612335565b4211156111255760405162461bcd60e51b815260206004820152602860248201527f696e697469616c697a6174696f6e20706572696f64206f7665722c207573652060448201527f74696d656c6f636b0000000000000000000000000000000000000000000000006064820152608401610632565b50600b80546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091161790556007805460ff19166001908117909155919050565b600061116f61091a565b600b5490915061118b906001600160a01b0316826108c1610522565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111db57600080fd5b505af11580156111ef573d6000803e3d6000fd5b5050505050565b610bc6611201610522565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b99190612305565b6005546001600160a01b031633146112d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b6112dc610522565b6001600160a01b0316816001600160a01b0316141561133d5760405162461bcd60e51b815260206004820152600660248201527f21746f6b656e00000000000000000000000000000000000000000000000000006044820152606401610632565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190612305565b90506113cd6001600160a01b0383163383611c51565b5050565b6005546001600160a01b0316331461142b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b6009546001600160a01b03166114835760405162461bcd60e51b815260206004820152601560248201527f5468657265206973206e6f2063616e64696461746500000000000000000000006044820152606401610632565b600a5442906114b3907f000000000000000000000000000000000000000000000000000000000000000090612335565b106115005760405162461bcd60e51b815260206004820152601460248201527f44656c617920686173206e6f74207061737365640000000000000000000000006044820152606401610632565b6009546040516001600160a01b0390911681527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a1600b60009054906101000a90046001600160a01b03166001600160a01b031663fb6177876040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561159057600080fd5b505af11580156115a4573d6000803e3d6000fd5b505060098054600b805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055505064012a05f200600a55610bc6611165565b6005546001600160a01b031633146116455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b6001600160a01b0381166116c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610632565b6116ca81611cfa565b50565b6001600160a01b0383166117485760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0382166117c45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146118b257818110156118a55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610632565b6118b284848484036116cd565b50505050565b6001600160a01b0383166119345760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0382166119b05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b03831660009081526020819052604090205481811015611a3f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611a76908490612335565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ac291815260200190565b60405180910390a36118b2565b6001600160a01b038216611b4b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b03821660009081526020819052604090205481811015611bda5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611c0990849061231e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611819565b505050565b6040516001600160a01b038316602482015260448101829052611c4c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611e89565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526118b29085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611c96565b6001600160a01b038216611e005760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610632565b8060026000828254611e129190612335565b90915550506001600160a01b03821660009081526020819052604081208054839290611e3f908490612335565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000611ede826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f6e9092919063ffffffff16565b805190915015611c4c5780806020019051810190611efc919061234d565b611c4c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610632565b6060611f7d8484600085611f85565b949350505050565b606082471015611ffd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0385163b6120545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610632565b600080866001600160a01b03168587604051612070919061236f565b60006040518083038185875af1925050503d80600081146120ad576040519150601f19603f3d011682016040523d82523d6000602084013e6120b2565b606091505b50915091506120c28282866120cd565b979650505050505050565b606083156120dc5750816105dc565b8251156120ec5782518084602001fd5b8160405162461bcd60e51b81526004016106329190612132565b60005b83811015612121578181015183820152602001612109565b838111156118b25750506000910152565b6020815260008251806020840152612151816040850160208701612106565b601f01601f19169190910160400192915050565b6001600160a01b03811681146116ca57600080fd5b6000806040838503121561218d57600080fd5b823561219881612165565b946020939093013593505050565b6000806000606084860312156121bb57600080fd5b83356121c681612165565b925060208401356121d681612165565b929592945050506040919091013590565b6000602082840312156121f957600080fd5b5035919050565b60006020828403121561221257600080fd5b81356105dc81612165565b6000806040838503121561223057600080fd5b823561223b81612165565b9150602083013561224b81612165565b809150509250929050565b600181811c9082168061226a57607f821691505b6020821081141561228b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122a357600080fd5b81516105dc81612165565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156122de576122de6122ae565b500290565b60008261230057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561231757600080fd5b5051919050565b600082821015612330576123306122ae565b500390565b60008219821115612348576123486122ae565b500190565b60006020828403121561235f57600080fd5b815180151581146105dc57600080fd5b60008251612381818460208701612106565b919091019291505056fea2646970667358221220ffd284e6f265596592df9e191534fbddc7945e3228fd1b433729489f2957dab764736f6c63430008090033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000944432d5757444f4745000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000126d78594f44455357415044435757444f47450000000000000000000000000000",
      tx_input:
        "0x60a06040526007805460ff191690553480156200001b57600080fd5b50604051620026fb380380620026fb8339810160408190526200003e9162000267565b82518390839062000057906003906020850190620000f4565b5080516200006d906004906020840190620000f4565b5050506200008a620000846200009e60201b60201c565b620000a2565b600160065560805250504260085562000317565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010290620002da565b90600052602060002090601f01602090048101928262000126576000855562000171565b82601f106200014157805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017157825182559160200191906001019062000154565b506200017f92915062000183565b5090565b5b808211156200017f576000815560010162000184565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001c257600080fd5b81516001600160401b0380821115620001df57620001df6200019a565b604051601f8301601f19908116603f011681019082821181831017156200020a576200020a6200019a565b816040528381526020925086838588010111156200022757600080fd5b600091505b838210156200024b57858201830151818301840152908201906200022c565b838211156200025d5760008385830101525b9695505050505050565b6000806000606084860312156200027d57600080fd5b83516001600160401b03808211156200029557600080fd5b620002a387838801620001b0565b94506020860151915080821115620002ba57600080fd5b50620002c986828701620001b0565b925050604084015190509250925092565b600181811c90821680620002ef57607f821691505b602082108114156200031157634e487b7160e01b600052602260045260246000fd5b50919050565b6080516123c16200033a60003960008181610432015261148e01526123c16000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638da5cb5b1161010f578063d389800f116100a2578063e2d1e75c11610071578063e2d1e75c1461042d578063e668524414610454578063f06c56101461045c578063f2fde38b1461046557600080fd5b8063d389800f146103d1578063dd62ed3e146103d9578063de5f626814610412578063def68a9c1461041a57600080fd5b8063a9059cbb116100de578063a9059cbb14610390578063b69ef8a8146103a3578063b6b55f25146103ab578063c4d66de8146103be57600080fd5b80638da5cb5b1461035157806395d89b4114610362578063a457c2d71461036a578063a8c62e761461037d57600080fd5b80633950935111610187578063715018a611610156578063715018a61461030357806376dfabb81461030b57806377c7b8fc14610341578063853828b61461034957600080fd5b806339509351146102ac57806348a0d754146102bf5780635b12ff9b146102c757806370a08231146102da57600080fd5b80631f1fcd51116101c35780631f1fcd511461025557806323b872dd146102755780632e1a7d4d14610288578063313ce5671461029d57600080fd5b806306fdde03146101f5578063095ea7b314610213578063158ef93e1461023657806318160ddd14610243575b600080fd5b6101fd610478565b60405161020a9190612132565b60405180910390f35b61022661022136600461217a565b61050a565b604051901515815260200161020a565b6007546102269060ff1681565b6002545b60405190815260200161020a565b61025d610522565b6040516001600160a01b03909116815260200161020a565b6102266102833660046121a6565b6105bd565b61029b6102963660046121e7565b6105e3565b005b6040516012815260200161020a565b6102266102ba36600461217a565b6108db565b61024761091a565b61029b6102d5366004612200565b61099d565b6102476102e8366004612200565b6001600160a01b031660009081526020819052604090205490565b61029b610b62565b600954600a54610322916001600160a01b03169082565b604080516001600160a01b03909316835260208301919091520161020a565b610247610bc8565b61029b610c0c565b6005546001600160a01b031661025d565b6101fd610c25565b61022661037836600461217a565b610c34565b600b5461025d906001600160a01b031681565b61022661039e36600461217a565b610ce9565b610247610cf7565b61029b6103b93660046121e7565b610e18565b6102266103cc366004612200565b610ff1565b61029b611165565b6102476103e736600461221d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61029b6111f6565b61029b610428366004612200565b61127a565b6102477f000000000000000000000000000000000000000000000000000000000000000081565b61029b6113d1565b61024760085481565b61029b610473366004612200565b6115eb565b60606003805461048790612256565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390612256565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b5050505050905090565b6000336105188185856116cd565b5060019392505050565b600b54604080517f1f1fcd5100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691631f1fcd51916004808301926020929190829003018186803b15801561058057600080fd5b505afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190612291565b905090565b6000336105cb858285611826565b6105d68585856118b8565b60019150505b9392505050565b6002600654141561063b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026006558061068d5760405162461bcd60e51b815260206004820152601560248201527f706c656173652070726f7669646520616d6f756e7400000000000000000000006044820152606401610632565b600061069860025490565b826106a1610cf7565b6106ab91906122c4565b6106b591906122e3565b60405181815290915033907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a26106f73383611acf565b6000610701610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561074257600080fd5b505afa158015610756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077a9190612305565b9050818110156108b4576000610790828461231e565b600b546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b505050506000610812610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561085357600080fd5b505afa158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088b9190612305565b90506000610899848361231e565b9050828110156108b0576108ad8185612335565b94505b5050505b6108d133836108c1610522565b6001600160a01b03169190611c51565b5050600160065550565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906105189082908690610915908790612335565b6116cd565b6000610924610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561096557600080fd5b505afa158015610979573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190612305565b6005546001600160a01b031633146109f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b806001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3057600080fd5b505afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190612291565b6001600160a01b0316306001600160a01b031614610aee5760405162461bcd60e51b815260206004820152602160248201527f50726f706f73616c206e6f742076616c696420666f722074686973205661756c60448201527f74000000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6040805180820182526001600160a01b0383168082524260209283018190526009805473ffffffffffffffffffffffffffffffffffffffff191683179055600a5591519182527f1aae2ec5647db56da2d513de40528ba3565c6057525637050660c4323bbac7df910160405180910390a150565b6005546001600160a01b03163314610bbc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b610bc66000611cfa565b565b6000610bd360025490565b15610bff57600254610be3610cf7565b610bf590670de0b6b3a76400006122c4565b6105b891906122e3565b50670de0b6b3a764000090565b33600090815260208190526040902054610bc6906105e3565b60606004805461048790612256565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919083811015610cd15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610632565b610cde82868684036116cd565b506001949350505050565b6000336105188185856118b8565b600b54604080517f722713f700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163722713f7916004808301926020929190829003018186803b158015610d5557600080fd5b505afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d9190612305565b610d95610522565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190612305565b6105b89190612335565b60026006541415610e6b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610632565b600260065580610ebd5760405162461bcd60e51b815260206004820152601560248201527f706c656173652070726f7669646520616d6f756e7400000000000000000000006044820152606401610632565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2600b60009054906101000a90046001600160a01b03166001600160a01b031663573fef0a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610f4257600080fd5b505af1158015610f56573d6000803e3d6000fd5b505050506000610f64610cf7565b9050610f85333084610f74610522565b6001600160a01b0316929190611d59565b610f8d611165565b6000610f97610cf7565b9050610fa3828261231e565b92506000610fb060025490565b610fbb575082610fdc565b82610fc560025490565b610fcf90866122c4565b610fd991906122e3565b90505b610fe63382611daa565b505060016006555050565b6005546000906001600160a01b0316331461104e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b60075460ff16156110a15760405162461bcd60e51b815260206004820181905260248201527f436f6e747261637420697320616c726561647920696e697469616c697a65642e6044820152606401610632565b6008546110b0906104b0612335565b4211156111255760405162461bcd60e51b815260206004820152602860248201527f696e697469616c697a6174696f6e20706572696f64206f7665722c207573652060448201527f74696d656c6f636b0000000000000000000000000000000000000000000000006064820152608401610632565b50600b80546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff199091161790556007805460ff19166001908117909155919050565b600061116f61091a565b600b5490915061118b906001600160a01b0316826108c1610522565b600b60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111db57600080fd5b505af11580156111ef573d6000803e3d6000fd5b5050505050565b610bc6611201610522565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b99190612305565b6005546001600160a01b031633146112d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b6112dc610522565b6001600160a01b0316816001600160a01b0316141561133d5760405162461bcd60e51b815260206004820152600660248201527f21746f6b656e00000000000000000000000000000000000000000000000000006044820152606401610632565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190612305565b90506113cd6001600160a01b0383163383611c51565b5050565b6005546001600160a01b0316331461142b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b6009546001600160a01b03166114835760405162461bcd60e51b815260206004820152601560248201527f5468657265206973206e6f2063616e64696461746500000000000000000000006044820152606401610632565b600a5442906114b3907f000000000000000000000000000000000000000000000000000000000000000090612335565b106115005760405162461bcd60e51b815260206004820152601460248201527f44656c617920686173206e6f74207061737365640000000000000000000000006044820152606401610632565b6009546040516001600160a01b0390911681527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a1600b60009054906101000a90046001600160a01b03166001600160a01b031663fb6177876040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561159057600080fd5b505af11580156115a4573d6000803e3d6000fd5b505060098054600b805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055505064012a05f200600a55610bc6611165565b6005546001600160a01b031633146116455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610632565b6001600160a01b0381166116c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610632565b6116ca81611cfa565b50565b6001600160a01b0383166117485760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0382166117c45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146118b257818110156118a55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610632565b6118b284848484036116cd565b50505050565b6001600160a01b0383166119345760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0382166119b05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b03831660009081526020819052604090205481811015611a3f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611a76908490612335565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ac291815260200190565b60405180910390a36118b2565b6001600160a01b038216611b4b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b03821660009081526020819052604090205481811015611bda5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611c0990849061231e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611819565b505050565b6040516001600160a01b038316602482015260448101829052611c4c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611e89565b600580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526118b29085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611c96565b6001600160a01b038216611e005760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610632565b8060026000828254611e129190612335565b90915550506001600160a01b03821660009081526020819052604081208054839290611e3f908490612335565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000611ede826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f6e9092919063ffffffff16565b805190915015611c4c5780806020019051810190611efc919061234d565b611c4c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610632565b6060611f7d8484600085611f85565b949350505050565b606082471015611ffd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610632565b6001600160a01b0385163b6120545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610632565b600080866001600160a01b03168587604051612070919061236f565b60006040518083038185875af1925050503d80600081146120ad576040519150601f19603f3d011682016040523d82523d6000602084013e6120b2565b606091505b50915091506120c28282866120cd565b979650505050505050565b606083156120dc5750816105dc565b8251156120ec5782518084602001fd5b8160405162461bcd60e51b81526004016106329190612132565b60005b83811015612121578181015183820152602001612109565b838111156118b25750506000910152565b6020815260008251806020840152612151816040850160208701612106565b601f01601f19169190910160400192915050565b6001600160a01b03811681146116ca57600080fd5b6000806040838503121561218d57600080fd5b823561219881612165565b946020939093013593505050565b6000806000606084860312156121bb57600080fd5b83356121c681612165565b925060208401356121d681612165565b929592945050506040919091013590565b6000602082840312156121f957600080fd5b5035919050565b60006020828403121561221257600080fd5b81356105dc81612165565b6000806040838503121561223057600080fd5b823561223b81612165565b9150602083013561224b81612165565b809150509250929050565b600181811c9082168061226a57607f821691505b6020821081141561228b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122a357600080fd5b81516105dc81612165565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156122de576122de6122ae565b500290565b60008261230057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561231757600080fd5b5051919050565b600082821015612330576123306122ae565b500390565b60008219821115612348576123486122ae565b500190565b60006020828403121561235f57600080fd5b815180151581146105dc57600080fd5b60008251612381818460208701612106565b919091019291505056fea2646970667358221220ffd284e6f265596592df9e191534fbddc7945e3228fd1b433729489f2957dab764736f6c63430008090033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000944432d5757444f4745000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000126d78594f44455357415044435757444f47450000000000000000000000000000",
      name: "MatrixVault",
      version: "v0.8.9+commit.e5eed63a",
      optimized: true,
      solcInput: %{
        "language": "Solidity",
        "sources": %{
          "contracts/MatrixVault.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IMatrixStrategy.sol\";\n\n/**\n * @dev Implementation of a vault to deposit funds for yield optimizing.\n * This is the contract that receives funds and that users interface with.\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\n */\ncontract MatrixVault is ERC20, Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    struct StratCandidate {\n        address implementation;\n        uint256 proposedTime;\n    }\n\n    event Deposit(address indexed _user, uint256 _wantAmount);\n    event Withdraw(address indexed _user, uint256 _wantAmount);\n    \n    /**\n     * @dev The stretegy's initialization status. Gives deployer 20 minutes after contract\n     * construction (constructionTime) to set the strategy implementation.\n     */\n    bool public initialized = false;\n    uint256 public constructionTime;\n\n    // The last proposed strategy to switch to.\n    StratCandidate public stratCandidate;\n    // The strategy currently in use by the vault.\n    address public strategy;\n    // The minimum time it has to pass before a strat candidate can be approved.\n    uint256 public immutable approvalDelay;\n\n    event NewStratCandidate(address implementation);\n    event UpgradeStrat(address implementation);\n\n    /**\n     * @dev Sets the value of {token} to the token that the vault will\n     * hold as underlying value. It initializes the vault's own 'moo' token.\n     * This token is minted when someone does a deposit. It is burned in order\n     * to withdraw the corresponding portion of the underlying assets.\n     * @param _name the name of the vault token.\n     * @param _symbol the symbol of the vault token.\n     * @param _approvalDelay the delay before a new strat can be approved.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _approvalDelay\n    ) ERC20(_name, _symbol) {\n        approvalDelay = _approvalDelay;\n        constructionTime = block.timestamp;\n    }\n\n    /**\n     * @dev Connects the vault to its initial strategy. One use only.\n     * @notice deployer has only 20 minutes after construction to connect the initial strategy.\n     * @param _strategy the vault's initial strategy\n     */\n\n    function initialize(address _strategy) public onlyOwner returns (bool) {\n        require(!initialized, \"Contract is already initialized.\");\n        require(\n            block.timestamp <= (constructionTime + 1200),\n            \"initialization period over, use timelock\"\n        );\n        strategy = _strategy;\n        initialized = true;\n        return true;\n    }\n\n    function want() public view returns (IERC20) {\n        return IERC20(IMatrixStrategy(strategy).want());\n    }\n\n    /**\n     * @dev It calculates the total underlying value of {token} held by the system.\n     * It takes into account the vault contract balance, the strategy contract balance\n     *  and the balance deployed in other contracts as part of the strategy.\n     */\n    function balance() public view returns (uint256) {\n        return\n            want().balanceOf(address(this)) +\n            IMatrixStrategy(strategy).balanceOf();\n    }\n\n    /**\n     * @dev Custom logic in here for how much the vault allows to be borrowed.\n     * We return 100% of tokens for now. Under certain conditions we might\n     * want to keep some of the system funds at hand in the vault, instead\n     * of putting them to work.\n     */\n    function available() public view returns (uint256) {\n        return want().balanceOf(address(this));\n    }\n\n    /**\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\n     */\n    function getPricePerFullShare() public view returns (uint256) {\n        return totalSupply() == 0 ? 1e18 : (balance() * 1e18) / totalSupply();\n    }\n\n    /**\n     * @dev A helper function to call deposit() with all the sender's funds.\n     */\n    function depositAll() external {\n        deposit(want().balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev The entrypoint of funds into the system. People deposit with this function\n     * into the vault. The vault is then in charge of sending funds into the strategy.\n     */\n    function deposit(uint256 _amount) public nonReentrant {\n        require(_amount > 0, \"please provide amount\");\n\n        emit Deposit(msg.sender, _amount);\n\n        IMatrixStrategy(strategy).beforeDeposit();\n\n        uint256 _pool = balance();\n        want().safeTransferFrom(msg.sender, address(this), _amount);\n        earn();\n        uint256 _after = balance();\n        _amount = _after - _pool; // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount * totalSupply()) / _pool;\n        }\n        _mint(msg.sender, shares);\n    }\n\n    /**\n     * @dev Function to send funds into the strategy and put them to work. It's primarily called\n     * by the vault's deposit() function.\n     */\n    function earn() public {\n        uint256 _bal = available();\n        want().safeTransfer(strategy, _bal);\n        IMatrixStrategy(strategy).deposit();\n    }\n\n    /**\n     * @dev A helper function to call withdraw() with all the sender's funds.\n     */\n    function withdrawAll() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev Function to exit the system. The vault will withdraw the required tokens\n     * from the strategy and pay up the token holder. A proportional number of IOU\n     * tokens are burned in the process.\n     */\n    function withdraw(uint256 _shares) public nonReentrant {\n        require(_shares > 0, \"please provide amount\");\n\n        uint256 r = (balance() * _shares) / totalSupply();\n\n        emit Withdraw(msg.sender, r);\n\n        _burn(msg.sender, _shares);\n\n        uint256 b = want().balanceOf(address(this));\n        if (b < r) {\n            uint256 _withdraw = r - b;\n            IMatrixStrategy(strategy).withdraw(_withdraw);\n            uint256 _after = want().balanceOf(address(this));\n            uint256 _diff = _after - b;\n            if (_diff < _withdraw) {\n                r = b + _diff;\n            }\n        }\n\n        want().safeTransfer(msg.sender, r);\n    }\n\n    /**\n     * @dev Sets the candidate for the new strat to use with this vault.\n     * @param _implementation The address of the candidate strategy.\n     */\n    function proposeStrat(address _implementation) public onlyOwner {\n        require(\n            address(this) == IMatrixStrategy(_implementation).vault(),\n            \"Proposal not valid for this Vault\"\n        );\n        stratCandidate = StratCandidate({\n            implementation: _implementation,\n            proposedTime: block.timestamp\n        });\n\n        emit NewStratCandidate(_implementation);\n    }\n\n    /**\n     * @dev It switches the active strat for the strat candidate. After upgrading, the\n     * candidate implementation is set to the 0x00 address, and proposedTime to a time\n     * happening in +100 years for safety.\n     */\n\n    function upgradeStrat() public onlyOwner {\n        require(\n            stratCandidate.implementation != address(0),\n            \"There is no candidate\"\n        );\n        require(\n            stratCandidate.proposedTime + approvalDelay < block.timestamp,\n            \"Delay has not passed\"\n        );\n\n        emit UpgradeStrat(stratCandidate.implementation);\n\n        IMatrixStrategy(strategy).retireStrat();\n        strategy = stratCandidate.implementation;\n        stratCandidate.implementation = address(0);\n        stratCandidate.proposedTime = 5000000000;\n\n        earn();\n    }\n\n    /**\n     * @dev Rescues random funds stuck that the strat can't handle.\n     * @param _token address of the token to rescue.\n     */\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\n        require(_token != address(want()), \"!token\");\n\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(msg.sender, amount);\n    }\n}\n"
          },
          "@openzeppelin/contracts/access/Ownable.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
          },
          "@openzeppelin/contracts/security/ReentrancyGuard.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
          },
          "@openzeppelin/contracts/token/ERC20/ERC20.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
          },
          "@openzeppelin/contracts/token/ERC20/IERC20.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
          },
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
          },
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
          },
          "@openzeppelin/contracts/utils/Address.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
          },
          "@openzeppelin/contracts/utils/Context.sol": %{
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
          },
          "contracts/interfaces/IMatrixStrategy.sol": %{
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMatrixStrategy {\n    function vault() external view returns (address);\n\n    function want() external view returns (IERC20);\n\n    function beforeDeposit() external;\n\n    function deposit() external;\n\n    function withdraw(uint256) external;\n\n    function balanceOf() external view returns (uint256);\n\n    function harvest() external;\n\n    function retireStrat() external;\n\n    function panic() external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function paused() external view returns (bool);\n}"
          }
        },
        "settings": %{
          "optimizer": %{
            "enabled": true,
            "runs": 1000
          },
          "outputSelection": %{
            "*": %{
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "devdoc",
                "userdoc",
                "storageLayout",
                "evm.gasEstimates"
              ],
              "": [
                "ast"
              ]
            }
          },
          "metadata": %{
            "useLiteralContent": true
          }
        }
      }
    }
  end

  def address_hash do
    {:ok, address_hash} =
      "address_hash"
      |> sequence(& &1)
      |> Hash.Address.cast()

    if to_string(address_hash) == "0x0000000000000000000000000000000000000000" do
      address_hash()
    else
      address_hash
    end
  end

  def block_factory do
    %Block{
      consensus: true,
      number: block_number(),
      hash: block_hash(),
      parent_hash: block_hash(),
      nonce: sequence("block_nonce", & &1),
      miner: build(:address),
      difficulty: Enum.random(1..100_000),
      total_difficulty: Enum.random(1..100_000),
      size: Enum.random(1..100_000),
      gas_limit: Enum.random(1..100_000),
      gas_used: Enum.random(1..100_000),
      timestamp: DateTime.utc_now(),
      refetch_needed: false
    }
  end

  def contract_method_factory() do
    %ContractMethod{
      identifier: Base.decode16!("60fe47b1", case: :lower),
      abi: %{
        "constant" => false,
        "inputs" => [%{"name" => "x", "type" => "uint256"}],
        "name" => "set",
        "outputs" => [],
        "payable" => false,
        "stateMutability" => "nonpayable",
        "type" => "function"
      },
      type: "function"
    }
  end

  def block_hash do
    {:ok, block_hash} =
      "block_hash"
      |> sequence(& &1)
      |> Hash.Full.cast()

    block_hash
  end

  def block_number do
    sequence("block_number", & &1)
  end

  def block_second_degree_relation_factory do
    %Block.SecondDegreeRelation{
      uncle_hash: block_hash(),
      nephew: build(:block),
      index: 0
    }
  end

  def with_block(%Transaction{index: nil} = transaction) do
    with_block(transaction, insert(:block))
  end

  def with_block(transactions) when is_list(transactions) do
    block = insert(:block)
    with_block(transactions, block)
  end

  def with_block(%Transaction{} = transaction, %Block{} = block) do
    with_block(transaction, block, [])
  end

  # The `transaction.block` must be consensus.  Non-consensus blocks can only be associated with the
  # `transaction_forks`.
  def with_block(transactions, %Block{consensus: true} = block) when is_list(transactions) do
    Enum.map(transactions, &with_block(&1, block))
  end

  def with_block(%Transaction{index: nil} = transaction, collated_params) when is_list(collated_params) do
    block = insert(:block)
    with_block(transaction, block, collated_params)
  end

  def with_block(
        %Transaction{index: nil} = transaction,
        # The `transaction.block` must be consensus.  Non-consensus blocks can only be associated with the
        # `transaction_forks`.
        %Block{consensus: true, hash: block_hash, number: block_number},
        collated_params
      )
      when is_list(collated_params) do
    next_transaction_index = block_hash_to_next_transaction_index(block_hash)

    cumulative_gas_used = collated_params[:cumulative_gas_used] || Enum.random(21_000..100_000)
    gas_used = collated_params[:gas_used] || Enum.random(21_000..100_000)
    status = Keyword.get(collated_params, :status, Enum.random([:ok, :error]))

    error = (status == :error && collated_params[:error]) || nil

    transaction
    |> Transaction.changeset(%{
      block_hash: block_hash,
      block_number: block_number,
      cumulative_gas_used: cumulative_gas_used,
      from_address_hash: transaction.from_address_hash,
      to_address_hash: transaction.to_address_hash,
      error: error,
      gas_used: gas_used,
      index: next_transaction_index,
      status: status
    })
    |> Repo.update!()
    |> Repo.preload(:block)
  end

  def with_contract_creation(%Transaction{} = transaction, %Address{hash: contract_address_hash}) do
    transaction
    |> Transaction.changeset(%{
      created_contract_address_hash: contract_address_hash
    })
    |> Repo.update!()
  end

  def with_contract_creation(%InternalTransaction{} = internal_transaction, %Address{
        contract_code: contract_code,
        hash: contract_address_hash
      }) do
    internal_transaction
    |> InternalTransaction.changeset(%{
      contract_code: contract_code,
      created_contract_address_hash: contract_address_hash
    })
    |> Repo.update!()
  end

  def data(sequence_name) do
    unpadded =
      sequence_name
      |> sequence(& &1)
      |> Integer.to_string(16)

    unpadded_length = String.length(unpadded)

    padded =
      case rem(unpadded_length, 2) do
        0 -> unpadded
        1 -> "0" <> unpadded
      end

    {:ok, data} = Data.cast("0x#{padded}")

    data
  end

  def pending_block_operation_factory do
    %PendingBlockOperation{
      # caller MUST supply block
      # all operations will default to false
      fetch_internal_transactions: false
    }
  end

  def internal_transaction_factory() do
    gas = Enum.random(21_000..100_000)
    gas_used = Enum.random(0..gas)

    %InternalTransaction{
      from_address: build(:address),
      to_address: build(:address),
      call_type: :delegatecall,
      gas: gas,
      gas_used: gas_used,
      input: %Data{bytes: <<1>>},
      output: %Data{bytes: <<2>>},
      # caller MUST supply `index`
      trace_address: [],
      # caller MUST supply `transaction` because it can't be built lazily to allow overrides without creating an extra
      # transaction
      # caller MUST supply `block_hash` (usually the same as the transaction's)
      # caller MUST supply `block_index`
      type: :call,
      value: sequence("internal_transaction_value", &Decimal.new(&1))
    }
  end

  def internal_transaction_create_factory() do
    gas = Enum.random(21_000..100_000)
    gas_used = Enum.random(0..gas)

    contract_code = Map.fetch!(contract_code_info(), :bytecode)

    %InternalTransaction{
      created_contract_code: contract_code,
      created_contract_address: build(:address, contract_code: contract_code),
      from_address: build(:address),
      gas: gas,
      gas_used: gas_used,
      # caller MUST supply `index`
      init: data(:internal_transaction_init),
      trace_address: [],
      # caller MUST supply `transaction` because it can't be built lazily to allow overrides without creating an extra
      # transaction
      # caller MUST supply `block_hash` (usually the same as the transaction's)
      # caller MUST supply `block_index`
      type: :create,
      value: sequence("internal_transaction_value", &Decimal.new(&1))
    }
  end

  def internal_transaction_selfdestruct_factory() do
    %InternalTransaction{
      from_address: build(:address),
      trace_address: [],
      # caller MUST supply `transaction` because it can't be built lazily to allow overrides without creating an extra
      # transaction
      type: :selfdestruct,
      value: sequence("internal_transaction_value", &Decimal.new(&1))
    }
  end

  def log_factory do
    block = build(:block)

    %Log{
      address: build(:address),
      block: block,
      block_number: block.number,
      data: data(:log_data),
      first_topic: nil,
      fourth_topic: nil,
      index: sequence("log_index", & &1),
      second_topic: nil,
      third_topic: nil,
      transaction: build(:transaction),
      type: sequence("0x")
    }
  end

  def token_factory do
    %Token{
      name: "Infinite Token",
      symbol: "IT",
      total_supply: 1_000_000_000,
      decimals: 18,
      contract_address: build(:address),
      type: "ERC-20",
      cataloged: true
    }
  end

  def token_transfer_log_factory do
    token_contract_address = build(:address)
    to_address = build(:address)
    from_address = build(:address)

    transaction = build(:transaction, to_address: token_contract_address, from_address: from_address)

    log_params = %{
      first_topic: TokenTransfer.constant(),
      second_topic: zero_padded_address_hash_string(from_address.hash),
      third_topic: zero_padded_address_hash_string(to_address.hash),
      address_hash: token_contract_address.hash,
      address: nil,
      data: "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
      transaction: transaction
    }

    build(:log, log_params)
  end

  def token_transfer_log_with_transaction(%Log{} = log, %Transaction{} = transaction) do
    params = %{
      second_topic: zero_padded_address_hash_string(transaction.from_address.hash),
      transaction: transaction
    }

    struct!(log, params)
  end

  def token_transfer_log_with_to_address(%Log{} = log, %Address{} = to_address) do
    %Log{log | third_topic: zero_padded_address_hash_string(to_address.hash)}
  end

  def token_transfer_factory do
    log = build(:token_transfer_log)
    to_address_hash = address_hash_from_zero_padded_hash_string(log.third_topic)
    from_address_hash = address_hash_from_zero_padded_hash_string(log.second_topic)

    # `to_address` is the only thing that isn't created from the token_transfer_log_factory
    to_address = build(:address, hash: to_address_hash)
    from_address = build(:address, hash: from_address_hash)
    contract_code = Map.fetch!(contract_code_info(), :bytecode)

    token_address = insert(:contract_address, contract_code: contract_code)
    insert(:token, contract_address: token_address)

    %TokenTransfer{
      block: build(:block),
      amount: Decimal.new(1),
      block_number: block_number(),
      from_address: from_address,
      to_address: to_address,
      token_contract_address: token_address,
      transaction: log.transaction,
      log_index: log.index
    }
  end

  def market_history_factory do
    %MarketHistory{
      closing_price: price(),
      opening_price: price(),
      date: Date.utc_today()
    }
  end

  def emission_reward_factory do
    # Generate ranges like 1 - 10,000; 10,001 - 20,000, 20,001 - 30,000; etc
    x = sequence("block_range", & &1)
    lower = x * Kernel.+(10_000, 1)
    upper = Kernel.+(lower, 9_999)

    wei_per_ether = Decimal.new(1_000_000_000_000_000_000)

    reward_multiplier =
      1..5
      |> Enum.random()
      |> Decimal.new()

    reward = Decimal.mult(reward_multiplier, wei_per_ether)

    %EmissionReward{
      block_range: %Range{from: lower, to: upper},
      reward: reward
    }
  end

  def reward_factory do
    %Reward{
      address_hash: build(:address).hash,
      address_type: :validator,
      block_hash: build(:block).hash,
      reward: Decimal.new(3)
    }
  end

  def transaction_factory do
    %Transaction{
      from_address: build(:address),
      gas: Enum.random(21_000..100_000),
      gas_price: Enum.random(10..99) * 1_000_000_00,
      hash: transaction_hash(),
      input: transaction_input(),
      nonce: Enum.random(1..1_000),
      r: sequence(:transaction_r, & &1),
      s: sequence(:transaction_s, & &1),
      to_address: build(:address),
      v: Enum.random(27..30),
      value: Enum.random(1..100_000)
    }
  end

  def transaction_to_verified_contract_factory do
    smart_contract = build(:smart_contract)

    address = %Address{
      hash: address_hash(),
      verified: true,
      contract_code: contract_code_info().bytecode,
      smart_contract: smart_contract
    }

    input_data =
      "set(uint)"
      |> ABI.encode([50])
      |> Base.encode16(case: :lower)

    build(:transaction, to_address: address, input: "0x" <> input_data)
  end

  def transaction_hash do
    {:ok, transaction_hash} =
      "transaction_hash"
      |> sequence(& &1)
      |> Hash.Full.cast()

    transaction_hash
  end

  def transaction_input do
    data(:transaction_input)
  end

  def transaction_fork_factory do
    %Transaction.Fork{
      hash: transaction_hash(),
      index: 0,
      uncle_hash: block_hash()
    }
  end

  def smart_contract_factory do
    contract_code_info = contract_code_info()

    bytecode_md5 = Helper.contract_code_md5(contract_code_info.bytecode)

    %SmartContract{
      address_hash: insert(:address, contract_code: contract_code_info.bytecode, verified: true).hash,
      compiler_version: contract_code_info.version,
      name: contract_code_info.name,
      contract_source_code: contract_code_info.source_code,
      optimization: contract_code_info.optimized,
      abi: contract_code_info.abi,
      contract_code_md5: bytecode_md5
    }
  end

  def decompiled_smart_contract_factory do
    contract_code_info = contract_code_info()

    %DecompiledSmartContract{
      address_hash: insert(:address, contract_code: contract_code_info.bytecode, decompiled: true).hash,
      decompiler_version: "test_decompiler",
      decompiled_source_code: contract_code_info.source_code
    }
  end

  def token_instance_factory do
    %Instance{
      token_contract_address_hash: build(:address),
      token_id: 5,
      metadata: %{key: "value"},
      error: nil
    }
  end

  def token_balance_factory do
    %TokenBalance{
      address: build(:address),
      token_contract_address_hash: insert(:token).contract_address_hash,
      block_number: block_number(),
      value: Enum.random(1..100_000),
      value_fetched_at: DateTime.utc_now(),
      token_type: "ERC-20"
    }
  end

  def address_current_token_balance_factory do
    %CurrentTokenBalance{
      address: build(:address),
      token_contract_address_hash: insert(:token).contract_address_hash,
      block_number: block_number(),
      value: Enum.random(1..100_000),
      value_fetched_at: DateTime.utc_now()
    }
  end

  defp block_hash_to_next_transaction_index(block_hash) do
    import Kernel, except: [+: 2]

    Repo.one!(
      from(
        transaction in Transaction,
        select: coalesce(max(transaction.index), -1) + 1,
        where: transaction.block_hash == ^block_hash
      )
    )
  end

  defp price do
    1..10_000
    |> Enum.random()
    |> Decimal.new()
    |> Decimal.div(Decimal.new(100))
  end

  defp zero_padded_address_hash_string(%Explorer.Chain.Hash{byte_count: 20} = hash) do
    "0x" <> hash_string = Explorer.Chain.Hash.to_string(hash)
    "0x000000000000000000000000" <> hash_string
  end

  defp address_hash_from_zero_padded_hash_string("0x000000000000000000000000" <> hash_string) do
    {:ok, hash} = Explorer.Chain.Hash.cast(Explorer.Chain.Hash.Address, "0x" <> hash_string)
    hash
  end

  def user_factory do
    username = sequence("user", &"user#{&1}")

    %User{
      username: username,
      password_hash: Bcrypt.hashpwsalt("password"),
      contacts: [
        %UserContact{
          email: "#{username}@blockscout",
          primary: true,
          verified: true
        }
      ]
    }
  end

  def administrator_factory do
    %Administrator{
      role: "owner",
      user: build(:user)
    }
  end

  def staking_pool_factory do
    wei_per_ether = 1_000_000_000_000_000_000

    %StakingPool{
      staking_address_hash: address_hash(),
      mining_address_hash: address_hash(),
      banned_until: 0,
      delegators_count: 0,
      is_active: true,
      is_banned: false,
      is_validator: true,
      total_staked_amount: wei_per_ether * 500,
      self_staked_amount: wei_per_ether * 500,
      was_banned_count: 0,
      was_validator_count: 1
    }
  end

  def staking_pools_delegator_factory do
    wei_per_ether = 1_000_000_000_000_000_000

    %StakingPoolsDelegator{
      staking_address_hash: address_hash(),
      address_hash: address_hash(),
      max_ordered_withdraw_allowed: wei_per_ether * 100,
      max_withdraw_allowed: wei_per_ether * 50,
      ordered_withdraw: wei_per_ether * 600,
      stake_amount: wei_per_ether * 200,
      ordered_withdraw_epoch: 2
    }
  end
end
